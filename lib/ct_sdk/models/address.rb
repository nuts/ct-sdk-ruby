=begin
#Commercetools

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: undefined

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CtSdk
  class Address
    attr_accessor :id

    attr_accessor :key

    attr_accessor :title

    attr_accessor :salutation

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :street_name

    attr_accessor :street_number

    attr_accessor :additional_street_info

    attr_accessor :postal_code

    attr_accessor :city

    attr_accessor :region

    attr_accessor :state

    # A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
    attr_accessor :country

    attr_accessor :company

    attr_accessor :department

    attr_accessor :building

    attr_accessor :apartment

    attr_accessor :p_o_box

    attr_accessor :phone

    attr_accessor :mobile

    attr_accessor :email

    attr_accessor :fax

    attr_accessor :additional_address_info

    attr_accessor :external_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'key' => :'key',
        :'title' => :'title',
        :'salutation' => :'salutation',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'street_name' => :'streetName',
        :'street_number' => :'streetNumber',
        :'additional_street_info' => :'additionalStreetInfo',
        :'postal_code' => :'postalCode',
        :'city' => :'city',
        :'region' => :'region',
        :'state' => :'state',
        :'country' => :'country',
        :'company' => :'company',
        :'department' => :'department',
        :'building' => :'building',
        :'apartment' => :'apartment',
        :'p_o_box' => :'pOBox',
        :'phone' => :'phone',
        :'mobile' => :'mobile',
        :'email' => :'email',
        :'fax' => :'fax',
        :'additional_address_info' => :'additionalAddressInfo',
        :'external_id' => :'externalId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'key' => :'String',
        :'title' => :'String',
        :'salutation' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'street_name' => :'String',
        :'street_number' => :'String',
        :'additional_street_info' => :'String',
        :'postal_code' => :'String',
        :'city' => :'String',
        :'region' => :'String',
        :'state' => :'String',
        :'country' => :'String',
        :'company' => :'String',
        :'department' => :'String',
        :'building' => :'String',
        :'apartment' => :'String',
        :'p_o_box' => :'String',
        :'phone' => :'String',
        :'mobile' => :'String',
        :'email' => :'String',
        :'fax' => :'String',
        :'additional_address_info' => :'String',
        :'external_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CtSdk::Address` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CtSdk::Address`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'salutation')
        self.salutation = attributes[:'salutation']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'street_name')
        self.street_name = attributes[:'street_name']
      end

      if attributes.key?(:'street_number')
        self.street_number = attributes[:'street_number']
      end

      if attributes.key?(:'additional_street_info')
        self.additional_street_info = attributes[:'additional_street_info']
      end

      if attributes.key?(:'postal_code')
        self.postal_code = attributes[:'postal_code']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'building')
        self.building = attributes[:'building']
      end

      if attributes.key?(:'apartment')
        self.apartment = attributes[:'apartment']
      end

      if attributes.key?(:'p_o_box')
        self.p_o_box = attributes[:'p_o_box']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'additional_address_info')
        self.additional_address_info = attributes[:'additional_address_info']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      pattern = Regexp.new(/^[A-Z]{2}$/)
      if @country !~ pattern
        invalid_properties.push("invalid value for \"country\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @country.nil?
      return false if @country !~ Regexp.new(/^[A-Z]{2}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.nil?
        fail ArgumentError, 'country cannot be nil'
      end

      pattern = Regexp.new(/^[A-Z]{2}$/)
      if country !~ pattern
        fail ArgumentError, "invalid value for \"country\", must conform to the pattern #{pattern}."
      end

      @country = country
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          key == o.key &&
          title == o.title &&
          salutation == o.salutation &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          street_name == o.street_name &&
          street_number == o.street_number &&
          additional_street_info == o.additional_street_info &&
          postal_code == o.postal_code &&
          city == o.city &&
          region == o.region &&
          state == o.state &&
          country == o.country &&
          company == o.company &&
          department == o.department &&
          building == o.building &&
          apartment == o.apartment &&
          p_o_box == o.p_o_box &&
          phone == o.phone &&
          mobile == o.mobile &&
          email == o.email &&
          fax == o.fax &&
          additional_address_info == o.additional_address_info &&
          external_id == o.external_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, key, title, salutation, first_name, last_name, street_name, street_number, additional_street_info, postal_code, city, region, state, country, company, department, building, apartment, p_o_box, phone, mobile, email, fax, additional_address_info, external_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CtSdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
